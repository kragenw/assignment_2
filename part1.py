import GAinspector
#import numpy as np
from utils import *

def randomGenome(length):
    """
    :param length:
    :return: string, random binary digit
    """
    """Your Code Here"""
    raiseNotDefined()


def makePopulation(size, length):
    """
    :param size - of population:
    :param length - of genome
    :return: list of length size containing genomes of length length
    """

    """Your Code Here"""

    raiseNotDefined()


def fitness(genome):
    """
    :param genome: 
    :return: the fitness value of a genome
    """


    raiseNotDefined()

def evaluateFitness(population):
    """
    :param population: 
    :return: a pair of values: the average fitness of the population as a whole and the fitness of the best individual in the population.
    """
    raiseNotDefined()



def crossover(genome1, genome2):
    """
    :param genome1:
    :param genome2:
    :return: two new genomes produced by crossing over the given genomes at a random crossover point.
    """
    raiseNotDefined()


def mutate(genome, mutationRate):
    """
    :param genome:
    :param mutationRate:
    :return: a new mutated version of the given genome.
    """
    raiseNotDefined()

def selectPair(population):
    """

    :param population:
    :return: two genomes from the given population using fitness-proportionate selection.
    This function should use weightedChoice, which is available in the Utils File, as a helper function.
    """
    raiseNotDefined()

def runGA(populationSize, crossoverRate, mutationRate, logFile=""):
    """

    :param populationSize: :param crossoverRate: :param mutationRate: :param logFile: :return: xt file in which to
    store the data generated by the GA, for plotting purposes. When the GA terminates, this function should return
    the generation at which the string of all ones was found.is the main GA program, which takes the population size,
    crossover rate (pc), and mutation rate (pm) as parameters. The optional logFile parameter is a string specifying
    the name of a te
    """
    raiseNotDefined()





if __name__ == '__main__':
    #Testing Code
    print("Test Suite")
    GAinspector.inspectFunction(randomGenome)
    GAinspector.inspectFunction(makePopulation)
    GAinspector.inspectFunction(fitness)
    GAinspector.inspectFunction(evaluateFitness)
    GAinspector.inspectFunction(crossover)
    GAinspector.inspectFunction(mutate)
    GAinspector.inspectFunction(selectPair)

    #runGA(100, 0.7, 0.001, "run1.txt")